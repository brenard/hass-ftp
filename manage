#!/bin/bash

SRC_DIR=$( dirname "$(realpath "$0")" )
NAME=$(basename "$SRC_DIR")
TRUNCATE_LOGS_BEFORE_EACH_START=1

ACTION="$1"
[ "$2" == "-x" ] && set -x

case $ACTION in

  create)
    CONFIG_DIR="$SRC_DIR/config"
    [ ! -d "$CONFIG_DIR" ] && mkdir "$CONFIG_DIR"
    docker create \
      --name "$NAME" \
      --privileged --restart=no \
      -e TZ="$( cat /etc/timezone )" \
      -v "$CONFIG_DIR:/config" \
      -v "$SRC_DIR/custom_components:/config/custom_components" \
      -v "$SRC_DIR:/usr/local/src" \
      -v "$SRC_DIR/bin:/root/bin" \
      -v "$SRC_DIR/.cache:/root/.cache" \
      -v "/run/dbus:/run/dbus:ro" \
      --network=host \
      ghcr.io/home-assistant/home-assistant
    ;;

  remove)
    if [[ -z "$( docker ps -aq -f "name=$NAME" 2>/dev/null )" ]]; then
        echo "Container $NAME does not exists"
        exit 0
    fi
    echo -n "Are-you sure you want to delete the container $NAME [Y/n]? "
    read -r r
    [[ -n "$r" ]] && [[ "$r" != "y" ]] && exit 0
    [[ -n "$( docker ps -aq -f status=running -f "name=$NAME" 2>/dev/null )" ]] && "$0" stop
    docker rm "$NAME"
    ;;

  rename)
    if [[ -z "$( docker ps -aq -f "name=$NAME" 2>/dev/null )" ]]; then
        echo "Container $NAME does not exists"
        exit 0
    fi
    NEW_NAME=""
    while [[ -z "$NEW_NAME" ]]; do
      echo -n "Please enter new name: "
      read -r NEW_NAME
    done
    echo -n "Are-you sure you want to rename the container '$NAME' as '$NEW_NAME' [Y/n]? "
    read -r r
    [[ -n "$r" ]] && [[ "$r" != "y" ]] && exit 0
    [[ -n "$( docker ps -aq -f status=running -f "name=$NAME" 2>/dev/null )" ]] && "$0" stop
    if ! docker rename "$NAME" "$NEW_NAME"; then
      echo "Failed to rename container as $NEW_NAME"
      exit 1
    fi
    if ! mv "$SRC_DIR" "$( dirname "$SRC_DIR" )/$NEW_NAME"; then
      echo "Failed to rename project as '$NEW_NAME'."
      exit 1
    fi
    echo "Project rename as '$NEW_NAME'."
    ;;

  start|stop|restart)
    if [[ "$ACTION" != "stop" ]]; then
        if [[ -z "$( docker ps -aq -f "name=$NAME" 2>/dev/null )" ]]; then
            "$0" create
        elif [[ "$TRUNCATE_LOGS_BEFORE_EACH_START" -eq 1 ]]; then
            "$0" truncate-logs
        fi
    fi

    docker "$ACTION" "$NAME"

    if [[ "$ACTION" != "stop" ]]; then
        "$0" logs
    fi
    ;;

  status)
    if [[ -n "$( docker ps -aq -f status=running -f "name=$NAME" 2>/dev/null )" ]]; then
        docker stats "$NAME" --all --no-trunc
    elif [[ -n "$( docker ps -aq -f status=exited -f "name=$NAME" 2>/dev/null )" ]]; then
        echo "Container $NAME is not running."
    else
        echo "Container $NAME does not exists."
    fi
    ;;

  shell)
      if [[ -n "$( docker ps -aq -f status=exited -f "name=$NAME" 2>/dev/null )" ]]; then
          echo "Container $NAME is not running."
          exit 1
      fi
      docker exec -it "$NAME" bash
      exit $?
      ;;

  recreate)
    "$0" remove
    "$0" create
    ;;

  check)
    if [[ -n "$( docker ps -aq -f status=exited -f "name=$NAME" 2>/dev/null )" ]]; then
      echo "Container $NAME is not running."
      exit 1
    fi
    docker exec -it -w /usr/local/src "$NAME" git config --global --add safe.directory /usr/local/src
    docker exec -it -w /usr/local/src "$NAME" pre-commit run --all-files
    exit $?
    ;;

  logs)
    docker logs -f "$NAME"
    ;;

  truncate-logs)
    sudo truncate -s 0 "$(docker inspect --format='{{.LogPath}}' "$NAME")"
    ;;

  *)
    cat << EOF
Usage: $0 [command]
  Available commands:
    create                     Create docker container
    remove                     Remove docker container
    rename                     Rename docker container and project directory
    recreate                   Recreate docker container
    start                      Start docker container
    status                     Show docker container status
    stop                       Stop docker container
    restart                    Restart docker container
    check                      Check code using configured pre-commit hooks
    logs                       Show (and follow) docker container logs
    truncate-logs              Truncate docker container logs
    shell                      Start a shell in docker container context
EOF
esac
